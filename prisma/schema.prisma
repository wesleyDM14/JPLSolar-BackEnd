//prisma models and schema
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
    id            String    @id @default(uuid())
    name          String?
    login         String    @unique
    password      String
    failedAttemps Int       @default(0)
    lockUntil     DateTime?
    role          UserRole  @default(CLIENTE)

    phone   String?
    address String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    //Relacionamento com plantas
    plantAsClient   Plant[] @relation("ClientPlants")
    plantAsMontador Plant[] @relation("MontadorPlants")

    //Relacionamentos
    contracts     Contract[]
    notifications Notification[]

    conta Conta?

    montadorId           String?
    montador             User?                  @relation("MontadorClientes", fields: [montadorId], references: [id], onDelete: Cascade)
    clientes             User[]                 @relation("MontadorClientes")
    Parcela              Parcela[]              @relation("ClienteParcela")
    Column               Column[]               @relation("MontadorColuna")
    ClienteFinanciamento ClienteFinanciamento[] @relation("MontadorClienteFinanciamento")
    StatusFinanciamento  ClienteFinanciamento?
}

model Plant {
    id                  String   @id @default(uuid())
    local               String
    inversor            Inversor
    inverterPot         Float
    panel               String
    panelPower          Float
    numberPanel         Int
    installedPower      Float
    login               String
    password            String
    code                String
    installationDate    DateTime
    estimatedGeneration Float
    status              String?
    eTotal              Float?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    //Relacionamento com a tabela cliente
    clientId String?
    client   User?   @relation("ClientPlants", fields: [clientId], references: [id], onDelete: Cascade)

    montadorId String
    montador   User   @relation("MontadorPlants", fields: [montadorId], references: [id], onDelete: Cascade)

    @@unique([code, montadorId])
}

model Contract {
    id             String      @id @default(uuid())
    nome           String
    email          String
    profissao      String
    estadoCivil    EstadoCivil
    dataNascimento DateTime
    cpf            String
    rg             String
    genero         Genero

    dataContrato        DateTime
    carencia            Int? //carencia em dias
    dataPrimeiraParcela DateTime
    quantParcelas       Int
    priceTotal          Float
    priceParcela        Float

    modeloModulos  String
    modeloInversor String
    potModulos     Float
    potInversor    Float

    avalistaId String?
    avalista   Avalista? @relation(fields: [avalistaId], references: [id])

    enderecoId  String
    endereco    Endereco      @relation(fields: [enderecoId], references: [id], onDelete: Cascade)
    Promissoria Promissoria[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User                   User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                 String
    clienteFinanciamentoId String?               @unique
    ClienteFinanciamento   ClienteFinanciamento?
}

model Endereco {
    id         String @id @default(uuid())
    logradouro String
    numero     Int
    bairro     String
    cidade     String
    uf         String
    cep        String

    contratos Contract[]
    avalistas Avalista[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Avalista {
    id        String @id @default(uuid())
    nome      String
    profissao String
    cpf       String

    Contract Contract[]

    enderecoId String
    endereco   Endereco @relation(fields: [enderecoId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Promissoria {
    id     String @id @default(uuid())
    numero Int
    ano    Int

    contractId String   @unique
    contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([numero, ano])
}

model Notification {
    id        String   @id @default(uuid())
    message   String
    isRead    Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, message, isRead])
}

model Parcela {
    id             String          @id @default(uuid())
    valor          Float
    num            Int
    numTotal       Int
    dataVencimento DateTime
    dataPagamento  DateTime?
    multa          Float?
    status         StatusPagamento @default(AGUARDANDO)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    clientId String
    client   User   @relation("ClienteParcela", fields: [clientId], references: [id], onDelete: Cascade)
}

model Column {
    id    String @id @default(uuid())
    title String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    montadorId String
    montador   User   @relation("MontadorColuna", fields: [montadorId], references: [id], onDelete: Cascade)
    Task       Task[]
}

model Task {
    id          String    @id @default(uuid())
    name        String
    description String
    dataFinal   DateTime?
    position    Int       @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    columnId String
    columm   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
}

model Conta {
    id               String    @id @default(uuid())
    agencia          String
    banco            String
    posto            String
    codBeneficiario  String
    cnpj             String    @unique
    empresa          String
    conta            String
    sicrediLogin     String    @unique
    sicrediPassword  String
    ivPassword       String
    accessToken      String?
    refreshToken     String?
    tokenExpireAt    DateTime?
    lastTokenRefresh DateTime?

    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([conta, banco])
}

model ClienteFinanciamento {
    id               String  @id @default(uuid())
    nome             String
    numParcelasTotal Int
    valorParcela     Float
    pagTotal         Float
    custoImplantacao Float
    lucro            Float
    numParcelasRest  Int
    valorQuitado     Float
    valorRest        Float
    sePagou          Boolean @default(false)
    notafiscal       Boolean @default(false)
    terceiro         Boolean @default(false)

    contractId String?   @unique
    contract   Contract? @relation(fields: [contractId], references: [id])

    clientId String? @unique
    client   User?   @relation(fields: [clientId], references: [id], onDelete: SetNull)

    montadorId String
    montador   User   @relation("MontadorClienteFinanciamento", fields: [montadorId], references: [id], onDelete: Cascade)
}

enum EstadoCivil {
    SOLTEIRO
    CASADO
    SEPARADO
    DIVORCIADO
    VIUVO
}

enum Inversor {
    ABB
    CANADIAN
    DEYE
    GROWATT
}

enum UserRole {
    ADMIN
    MONTADOR
    PARCEIRO
    CLIENTE
}

enum StatusPagamento {
    PAGO
    ATRASADO
    AGUARDANDO
}

enum Genero {
    MASCULINO
    FEMININO
}
